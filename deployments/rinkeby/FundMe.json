{
  "address": "0x384eca7760BEFcd24d37682AbFFa2D74434B5733",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xed5965ae700f17c04d753876df6c836dff00dea39e2b29bff0f7cc98fd2ce8a7",
  "receipt": {
    "to": null,
    "from": "0x1DB4b01C737a737b345A52Da147CcB8d3B3f748E",
    "contractAddress": "0x384eca7760BEFcd24d37682AbFFa2D74434B5733",
    "transactionIndex": 14,
    "gasUsed": "1005423",
    "logsBloom": "0x
    "blockHash": "0xc00f2e475bb9ea6c5d711dc2eb1f1f817489e9d71724d46c6ecd70a465aab2cd",
    "transactionHash": "0xed5965ae700f17c04d753876df6c836dff00dea39e2b29bff0f7cc98fd2ce8a7",
    "logs": [],
    "blockNumber": 11463827,
    "cumulativeGasUsed": "24968084",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419"
  ],
  "numDeployments": 1,
  "solcInputHash": "75c1c827da5407299148d5921391669f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"oluwatobiloba\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// 1. Pragma\\r\\npragma solidity ^0.8.0;\\r\\n// 2. Imports\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// 3. Interfaces, Libraries, Contracts\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**@title A sample Funding Contract\\r\\n * @author oluwatobiloba\\r\\n * @notice This contract is for creating a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State variables\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\r\\n    address private immutable i_owner;\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    // Events (we have none!)\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions Order:\\r\\n    //// constructor\\r\\n    //// receive\\r\\n    //// fallback\\r\\n    //// external\\r\\n    //// public\\r\\n    //// internal\\r\\n    //// private\\r\\n    //// view / pure\\r\\n\\r\\n    constructor(address priceFeed) {\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\r\\n        i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Funds our contract based on the ETH/USD price\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You need to spend more ETH!\\\"\\r\\n        );\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n        s_funders.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // Transfer vs call vs Send\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        // mappings can't be in memory, sorry!\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /** @notice Gets the amount that an address has funded\\r\\n     *  @param fundingAddress the address of the funder\\r\\n     *  @return the amount funded\\r\\n     */\\r\\n    function getAddressToAmountFunded(address fundingAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_addressToAmountFunded[fundingAddress];\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (uint256) {\\r\\n        return s_priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8224ac7fd3b9afbd3710788d5eb79600081baacd418a62768cb31dc913ee37d3\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x899c86ea0cbf01a11639446defd36d093e94ec5aa92e085f5f172e5188a063e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012563803806200125683398181016040528101906200003791906200011d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516110cf62000187600039600081816102b201528181610445015281816104eb01528181610676015261086c01526110cf6000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b20565b6101cf565b6040516100bf9190610b66565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610b66565b60405180910390f35b6100fb6102b0565b005b34801561010957600080fd5b506101126104da565b60405161011f9190610b66565b60405180910390f35b34801561013457600080fd5b5061013d6104e7565b60405161014a9190610b90565b60405180910390f35b34801561015f57600080fd5b5061016861050f565b6040516101759190610c0a565b60405180910390f35b610186610539565b005b610190610674565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c51565b610902565b6040516101c69190610b90565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab9190610c93565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610335576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103e057600080828154811061035a57610359610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103d890610d1e565b915050610338565b50600067ffffffffffffffff8111156103fc576103fb610d66565b5b60405190808252806020026020018201604052801561042a5781602001602082028036833780820191505090505b5060009080519060200190610440929190610a16565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161048790610dc6565b60006040518083038185875af1925050503d80600081146104c4576040519150601f19603f3d011682016040523d82523d6000602084013e6104c9565b606091505b50509050806104d757600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610578600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461094990919063ffffffff16565b10156105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090610e38565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106089190610e58565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561077c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610732575b5050505050905060005b81518110156108075760008282815181106107a4576107a3610cc0565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ff90610d1e565b915050610786565b50600067ffffffffffffffff81111561082357610822610d66565b5b6040519080825280602002602001820160405280156108515781602001602082028036833780820191505090505b5060009080519060200190610867929190610a16565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ae90610dc6565b60006040518083038185875af1925050503d80600081146108eb576040519150601f19603f3d011682016040523d82523d6000602084013e6108f0565b606091505b50509050806108fe57600080fd5b5050565b600080828154811061091757610916610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061095583610985565b90506000670de0b6b3a7640000858361096e9190610e8c565b6109789190610efd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190610fa6565b5050509150506402540be40081610a0e9190611021565b915050919050565b828054828255906000526020600020908101928215610a8f579160200282015b82811115610a8e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a36565b5b509050610a9c9190610aa0565b5090565b5b80821115610ab9576000816000905550600101610aa1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aed82610ac2565b9050919050565b610afd81610ae2565b8114610b0857600080fd5b50565b600081359050610b1a81610af4565b92915050565b600060208284031215610b3657610b35610abd565b5b6000610b4484828501610b0b565b91505092915050565b6000819050919050565b610b6081610b4d565b82525050565b6000602082019050610b7b6000830184610b57565b92915050565b610b8a81610ae2565b82525050565b6000602082019050610ba56000830184610b81565b92915050565b6000819050919050565b6000610bd0610bcb610bc684610ac2565b610bab565b610ac2565b9050919050565b6000610be282610bb5565b9050919050565b6000610bf482610bd7565b9050919050565b610c0481610be9565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b610c2e81610b4d565b8114610c3957600080fd5b50565b600081359050610c4b81610c25565b92915050565b600060208284031215610c6757610c66610abd565b5b6000610c7584828501610c3c565b91505092915050565b600081519050610c8d81610c25565b92915050565b600060208284031215610ca957610ca8610abd565b5b6000610cb784828501610c7e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2982610b4d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d5b57610d5a610cef565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db0600083610d95565b9150610dbb82610da0565b600082019050919050565b6000610dd182610da3565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e22601b83610ddb565b9150610e2d82610dec565b602082019050919050565b60006020820190508181036000830152610e5181610e15565b9050919050565b6000610e6382610b4d565b9150610e6e83610b4d565b9250828201905080821115610e8657610e85610cef565b5b92915050565b6000610e9782610b4d565b9150610ea283610b4d565b9250828202610eb081610b4d565b91508282048414831517610ec757610ec6610cef565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0882610b4d565b9150610f1383610b4d565b925082610f2357610f22610ece565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4d81610f2e565b8114610f5857600080fd5b50565b600081519050610f6a81610f44565b92915050565b6000819050919050565b610f8381610f70565b8114610f8e57600080fd5b50565b600081519050610fa081610f7a565b92915050565b600080600080600060a08688031215610fc257610fc1610abd565b5b6000610fd088828901610f5b565b9550506020610fe188828901610f91565b9450506040610ff288828901610c7e565b935050606061100388828901610c7e565b925050608061101488828901610f5b565b9150509295509295909350565b600061102c82610f70565b915061103783610f70565b925082820261104581610f70565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561107d5761107c610cef565b5b828205841483151761109257611091610cef565b5b509291505056fea2646970667358221220cb2a99d5b5b52836efd0cba4541c1fe7a32ce0897d13c1c0973b161ec6be686f64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b20565b6101cf565b6040516100bf9190610b66565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610b66565b60405180910390f35b6100fb6102b0565b005b34801561010957600080fd5b506101126104da565b60405161011f9190610b66565b60405180910390f35b34801561013457600080fd5b5061013d6104e7565b60405161014a9190610b90565b60405180910390f35b34801561015f57600080fd5b5061016861050f565b6040516101759190610c0a565b60405180910390f35b610186610539565b005b610190610674565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c51565b610902565b6040516101c69190610b90565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab9190610c93565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610335576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103e057600080828154811061035a57610359610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103d890610d1e565b915050610338565b50600067ffffffffffffffff8111156103fc576103fb610d66565b5b60405190808252806020026020018201604052801561042a5781602001602082028036833780820191505090505b5060009080519060200190610440929190610a16565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161048790610dc6565b60006040518083038185875af1925050503d80600081146104c4576040519150601f19603f3d011682016040523d82523d6000602084013e6104c9565b606091505b50509050806104d757600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610578600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461094990919063ffffffff16565b10156105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090610e38565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106089190610e58565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561077c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610732575b5050505050905060005b81518110156108075760008282815181106107a4576107a3610cc0565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ff90610d1e565b915050610786565b50600067ffffffffffffffff81111561082357610822610d66565b5b6040519080825280602002602001820160405280156108515781602001602082028036833780820191505090505b5060009080519060200190610867929190610a16565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ae90610dc6565b60006040518083038185875af1925050503d80600081146108eb576040519150601f19603f3d011682016040523d82523d6000602084013e6108f0565b606091505b50509050806108fe57600080fd5b5050565b600080828154811061091757610916610cc0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061095583610985565b90506000670de0b6b3a7640000858361096e9190610e8c565b6109789190610efd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190610fa6565b5050509150506402540be40081610a0e9190611021565b915050919050565b828054828255906000526020600020908101928215610a8f579160200282015b82811115610a8e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a36565b5b509050610a9c9190610aa0565b5090565b5b80821115610ab9576000816000905550600101610aa1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aed82610ac2565b9050919050565b610afd81610ae2565b8114610b0857600080fd5b50565b600081359050610b1a81610af4565b92915050565b600060208284031215610b3657610b35610abd565b5b6000610b4484828501610b0b565b91505092915050565b6000819050919050565b610b6081610b4d565b82525050565b6000602082019050610b7b6000830184610b57565b92915050565b610b8a81610ae2565b82525050565b6000602082019050610ba56000830184610b81565b92915050565b6000819050919050565b6000610bd0610bcb610bc684610ac2565b610bab565b610ac2565b9050919050565b6000610be282610bb5565b9050919050565b6000610bf482610bd7565b9050919050565b610c0481610be9565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b610c2e81610b4d565b8114610c3957600080fd5b50565b600081359050610c4b81610c25565b92915050565b600060208284031215610c6757610c66610abd565b5b6000610c7584828501610c3c565b91505092915050565b600081519050610c8d81610c25565b92915050565b600060208284031215610ca957610ca8610abd565b5b6000610cb784828501610c7e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2982610b4d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d5b57610d5a610cef565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db0600083610d95565b9150610dbb82610da0565b600082019050919050565b6000610dd182610da3565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e22601b83610ddb565b9150610e2d82610dec565b602082019050919050565b60006020820190508181036000830152610e5181610e15565b9050919050565b6000610e6382610b4d565b9150610e6e83610b4d565b9250828201905080821115610e8657610e85610cef565b5b92915050565b6000610e9782610b4d565b9150610ea283610b4d565b9250828202610eb081610b4d565b91508282048414831517610ec757610ec6610cef565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0882610b4d565b9150610f1383610b4d565b925082610f2357610f22610ece565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4d81610f2e565b8114610f5857600080fd5b50565b600081519050610f6a81610f44565b92915050565b6000819050919050565b610f8381610f70565b8114610f8e57600080fd5b50565b600081519050610fa081610f7a565b92915050565b600080600080600060a08688031215610fc257610fc1610abd565b5b6000610fd088828901610f5b565b9550506020610fe188828901610f91565b9450506040610ff288828901610c7e565b935050606061100388828901610c7e565b925050608061101488828901610f5b565b9150509295509295909350565b600061102c82610f70565b915061103783610f70565b925082820261104581610f70565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561107d5761107c610cef565b5b828205841483151761109257611091610cef565b5b509291505056fea2646970667358221220cb2a99d5b5b52836efd0cba4541c1fe7a32ce0897d13c1c0973b161ec6be686f64736f6c63430008110033",
  "devdoc": {
    "author": "oluwatobiloba",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}